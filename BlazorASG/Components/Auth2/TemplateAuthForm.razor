@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using BlazorASG.VitsModel.Auth



<MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
    @if (!IsLogin)
    {
        <MudTextField T="string" Disabled="false" Required="true" Label="PhoneNumber" RequiredError="Phone Number is required!" @bind-Value="@phoneNumber" />
    }
    <MudTextField T="string" Label="Email"  Required="true" RequiredError="Email is required!"
                  Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" @bind-Value="@email" />
    <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @ref="pwField1"
                  InputType="InputType.Password"
                  Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                  RequiredError="Password is required!" @bind-Value="@password" />
    @if (!IsLogin){
                 <MudTextField T="string"
                  Label="Password" HelperText="Repeat the password" InputType="InputType.Password"
                      Validation="@(new Func<string, string>(PasswordMatch))"  />
    }
    <div class="d-flex align-center justify-space-between">
        <MudCheckBox T="bool" Required="true" RequiredError="You must agree" Label="I agree!" />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="onSubmitForm" Disabled="@(!success)" Class="ml-auto">@(IsLogin ? "Login" : "Register")</MudButton>
    </div>

     @if (IsLogin){
        <div class="d-flex align-center justify-space-between">
            <MudButton OnClick="onClickForgetPassword" Color="Color.Primary">Forgot Password?</MudButton>
    </div>
     }


    @if (errors != null && errors.Count() > 0)
    {
        <MudAlert Severity="Severity.Error" Class="mt-3">
            <ul>
                @foreach (var error in errors)
                {
                    <li>@error</li>
                }
            </ul>
        </MudAlert>
    }

    <MudDialog Class="col-5 w-50" Style="width:30% !important" DefaultFocus="DefaultFocus.LastChild" @bind-IsVisible=isVisible>
        <TitleContent>
            <MudText Typo="Typo.h6">
                <h3 class="d-flex align-center justify-content-center flex-column">Reset Password</h3>
            </MudText>
        </TitleContent>
        <DialogActions>

        </DialogActions>
        <DialogContent>
            <MudContainer Style="width:100% !important" class="w-100 border  d-flex align-center justify-content-center flex-column">
                <MudForm Style="width:100% !important" @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                    <div class="d-flex align-center justify-content-center flex-column" style="padding:2% 2%;margin:auto 10px;width:100% !important ">
                        <MudTextField T="string" Class="my-5" FullWidth Label="Email" Required="true" RequiredError="Email is required!"
                                      Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" @bind-Value="@email" />

                        <MudButton Variant="Variant.Filled" FullWidth Color="Color.Primary" OnClick="onSubmitConfirmEmail" Class="ml-auto my-5">Confirm</MudButton>

                    </div>
                </MudForm>

            </MudContainer>
        </DialogContent>

    </MudDialog>

</MudForm>


@code {

    [Parameter] public bool IsLogin { set; get; } = false;
    [Parameter] public EventCallback<LoginRequest> OnLoginSubmit { get; set; }
    [Parameter] public EventCallback<RegisterRequest> OnRegisterSubmit { get; set; }
    [Parameter] public List<string> ErrorMessages {  set {
            if (value!=null &&  value.Count()>0)
                errors = value.ToArray();
        } }

    bool success;
    bool isVisible=false;
    string[] errors = { };

    MudTextField<string> pwField1;
    MudForm form;

    private string phoneNumber;
    private string email="test@gmail.com";
    private string password="Test@2025";
    private string repeatPassword;



    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;


        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        repeatPassword = pwField1.Value;
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }

    private async Task onClickForgetPassword()
    {
        isVisible = true;
        StateHasChanged();
    }


    private async Task onSubmitConfirmEmail()
    {
        await form.Validate();
        if (success)
        {
            
            // if (OnLoginSubmit.HasDelegate)
            // {
            //     await OnLoginSubmit.InvokeAsync(email);
            // }

        }
    }
    private async Task onSubmitForm()
    {
        await form.Validate();
      
        if (success)
        {
            if (IsLogin)
            {
               
                var data = new LoginRequest
                    {
                  
                        Email = email,
                        Password = password,
                    };

  
          
                // استدعاء المفوض وتمرير البيانات
                if (OnLoginSubmit.HasDelegate)
                {
                    await OnLoginSubmit.InvokeAsync(data);
                }

                // معالجة تسجيل الدخول
                Console.WriteLine($"Logging in with Email: {email}, Password: {password}");
            }
            else
            {

                var data = new RegisterRequest
                    {

                        Email = email,
                        Password = password,
                        PhoneNumber = phoneNumber,
                    };

                // استدعاء المفوض وتمرير البيانات
                if (OnRegisterSubmit.HasDelegate)
                {
                    await OnRegisterSubmit.InvokeAsync(data);
                }
                // معالجة التسجيل
                Console.WriteLine($"Registering with Username: {phoneNumber}, Email: {email}, Password: {password}");
            }
        }
        else
        {
            Console.WriteLine("Form is invalid!");
        }
    }

}