@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using BlazorASG.VitsModel.Auth
<MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
    @if (!IsLogin)
    {
        <MudTextField T="string" Label="Username" Required="true" RequiredError="User name is required!" @bind-Value="@username" />
    }
    <MudTextField T="string" Label="Email"  Required="true" RequiredError="Email is required!"
                  Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" @bind-Value="@email" />
    <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @ref="pwField1"
                  InputType="InputType.Password"
                  Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                  RequiredError="Password is required!" @bind-Value="@password" />
    @if (!IsLogin){
                 <MudTextField T="string"
                  Label="Password" HelperText="Repeat the password" InputType="InputType.Password"
                      Validation="@(new Func<string, string>(PasswordMatch))"  />
    }
    <div class="d-flex align-center justify-space-between">
        <MudCheckBox T="bool" Required="true" RequiredError="You must agree" Label="I agree!" />
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="onSubmitForm" Disabled="@(!success)" Class="ml-auto">@(IsLogin ? "Login" : "Register")</MudButton>
    </div>
</MudForm>


@code {

    [Parameter] public bool IsLogin { set; get; } = false;
    [Parameter] public EventCallback<LoginRequest> OnLoginSubmit { get; set; }
    [Parameter] public EventCallback<RegisterRequest> OnRegisterSubmit { get; set; }

    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;

    private string username;
    private string email;
    private string password;
    private string repeatPassword;



    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;


        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        repeatPassword = pwField1.Value;
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }

    private async Task onSubmitForm()
    {
        await form.Validate();

        if (success)
        {
            if (IsLogin)
            {
                var data = new LoginRequest
                    {
                  
                        Email = email,
                        Password = password,
                    };

                // استدعاء المفوض وتمرير البيانات
                if (OnLoginSubmit.HasDelegate)
                {
                    await OnLoginSubmit.InvokeAsync(data);
                }

                // معالجة تسجيل الدخول
                Console.WriteLine($"Logging in with Email: {email}, Password: {password}");
            }
            else
            {

                var data = new RegisterRequest
                    {

                        Email = email,
                        Password = password,
                        PhoneNumber = password,
                    };

                // استدعاء المفوض وتمرير البيانات
                if (OnRegisterSubmit.HasDelegate)
                {
                    await OnRegisterSubmit.InvokeAsync(data);
                }
                // معالجة التسجيل
                Console.WriteLine($"Registering with Username: {username}, Email: {email}, Password: {password}");
            }
        }
        else
        {
            Console.WriteLine("Form is invalid!");
        }
    }

}